# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = "eaton-5px2200rt-server-room"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  urls = ["http://10.0.10.31:8086"]

  ## Token for authentication.
  token = "${INFLUX_TOKEN}"

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "Brewer"

  ## Destination bucket to write into.
  bucket = "eaton-5px2200rt"

  ## The value of this tag will be used to determine the bucket.  If this
  ## tag is not set the 'bucket' option is used as the default.
  # bucket_tag = ""

  ## If true, the bucket tag will not be added to the metric.
  # exclude_bucket_tag = false

  ## Timeout for HTTP messages.
  # timeout = "5s"

  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"

  ## HTTP User-Agent
  # user_agent = "telegraf"

  ## Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "gzip"

  ## Enable or disable uint support for writing uints influxdb 2.0.
  # influx_uint_support = false

  ## Optional TLS Config for use on HTTP connections.
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false
# Retrieves SNMP values from remote agents
[[inputs.snmp]]
  ## Agent addresses to retrieve values from.
  ##   format:  agents = ["<scheme://><hostname>:<port>"]
  ##   scheme:  optional, either udp, udp4, udp6, tcp, tcp4, tcp6.
  ##            default is udp
  ##   port:    optional
  ##   example: agents = ["udp://127.0.0.1:161"]
  ##            agents = ["tcp://127.0.0.1:161"]
  ##            agents = ["udp4://v4only-snmp-agent"]
  agents = ["udp://10.0.10.30:161"]

  ## Timeout for each request.
  timeout = "5s"

  ## SNMP version; can be 1, 2, or 3.
  version = 3

  ## Unconnected UDP socket
  ## When true, SNMP reponses are accepted from any address not just
  ## the requested address. This can be useful when gathering from
  ## redundant/failover systems.
  unconnected_udp_socket = false

  ## Path to mib files
  ## Used by the gosmi translator.
  ## To add paths when translating with netsnmp, use the MIBDIRS environment variable
  # path = ["/usr/share/snmp/mibs"]

  ## SNMP community string.
  # community = "public"

  ## Agent host tag
  # agent_host_tag = "agent_host"

  ## Number of retries to attempt.
  retries = 3

  ## The GETBULK max-repetitions parameter.
  # max_repetitions = 10

  ## SNMPv3 authentication and encryption options.
  ##
  ## Security Name.
  sec_name = "readuser"
  ## Authentication protocol; one of "MD5", "SHA", "SHA224", "SHA256", "SHA384", "SHA512" or "".
  auth_protocol = "MD5"
  ## Authentication password.
  auth_password = "${SNMP_PASSWORD}"
  ## Security Level; one of "noAuthNoPriv", "authNoPriv", or "authPriv".
  sec_level = "authNoPriv"
  ## Context Name.
  # context_name = ""
  ## Privacy protocol used for encrypted messages; one of "DES", "AES", "AES192", "AES192C", "AES256", "AES256C", or "".
  ### Protocols "AES192", "AES192", "AES256", and "AES256C" require the underlying net-snmp tools
  ### to be compiled with --enable-blumenthal-aes (http://www.net-snmp.org/docs/INSTALL.html)
  # priv_protocol = ""
  ## Privacy password used for encrypted messages.
  # priv_password = ""

  ## Add fields and tables defining the variables you wish to collect.  This
  ## example collects the system uptime and interface variables.  Reference the
  ## full plugin documentation for configuration details.
  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.1.1.0"
    name = "product_family_name"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.1.2.0"
    name = "product_model_name"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.4.7.0"
    name = "config_low_battery_time_seconds"
    conversion = "int"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.4.8.0"
    name = "config_low_battery_level_percent"

    [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.4.12.0"
    name = "va_rating"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.5.1.0"
    name = "battery_remaining_time_seconds"
    conversion = "int"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.5.2.0"
    name = "battery_level_percent"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.5.5.0"
    name = "battery_volts"
    conversion = "float(1)"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.5.6.0"
    name = "battery_current_amps"
    conversion = "float(1)"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.6.4.0"
    name = "input_fail_cause"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.6.2.1.2.1.0"
    name = "input_volts"
    conversion = "float(1)"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.6.2.1.3.1.0"
    name = "input_frequency_hertz"
    conversion = "float(1)"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.7.2.1.2.1"
    name = "output_volts"
    conversion = "float(1)"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.7.2.1.3.1"
    name = "output_frequency_hertz"
    conversion = "float(1)"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.7.2.1.4.1"
    name = "output_load_percent"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.7.2.1.5.1"
    name = "output_current_amps"
    conversion = "float(1)"

  # A value of 1 represents "yes" and 2 represents "no" for all of the following boolean statuses.

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.4.9.0"
    name = "config_auto_restart"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.5.9.0"
    name = "battery_fault"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.5.11.0"
    name = "battery_replacement"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.5.14.0"
    name = "low_battery"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.5.15.0"
    name = "battery_charger_fault"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.5.16.0"
    name = "battery_low_condition"

[[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.6.3.0"
    name = "input_bad_status"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.7.3.0"
    name = "output_on_battery"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.7.4.0"
    name = "output_on_bypass"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.7.7.0"
    name = "output_utility_off"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.7.9.0"
    name = "output_inverter_off"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.7.10.0"
    name = "output_overload"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.705.1.7.11.0"
    name = "output_over_temp"
